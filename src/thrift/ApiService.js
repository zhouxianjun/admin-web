//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var PublicStruct_ttypes = require('./PublicStruct_types')


var ttypes = require('./ApiService_types');
//HELPER FUNCTIONS AND STRUCTURES

ApiService_boxLogin_args = function(args) {
  this.username = null;
  this.password = null;
  this.box_id = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.box_id !== undefined && args.box_id !== null) {
      this.box_id = args.box_id;
    }
  }
};
ApiService_boxLogin_args.prototype = {};
ApiService_boxLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.box_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_boxLogin_args.prototype.write = function(output) {
  output.writeStructBegin('ApiService_boxLogin_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.box_id !== null && this.box_id !== undefined) {
    output.writeFieldBegin('box_id', Thrift.Type.STRING, 3);
    output.writeString(this.box_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_boxLogin_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ApiService_boxLogin_result.prototype = {};
ApiService_boxLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_boxLogin_result.prototype.write = function(output) {
  output.writeStructBegin('ApiService_boxLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_checkBoxVersion_args = function(args) {
  this.box_id = null;
  this.version_code = null;
  if (args) {
    if (args.box_id !== undefined && args.box_id !== null) {
      this.box_id = args.box_id;
    }
    if (args.version_code !== undefined && args.version_code !== null) {
      this.version_code = args.version_code;
    }
  }
};
ApiService_checkBoxVersion_args.prototype = {};
ApiService_checkBoxVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.box_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_checkBoxVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ApiService_checkBoxVersion_args');
  if (this.box_id !== null && this.box_id !== undefined) {
    output.writeFieldBegin('box_id', Thrift.Type.STRING, 1);
    output.writeString(this.box_id);
    output.writeFieldEnd();
  }
  if (this.version_code !== null && this.version_code !== undefined) {
    output.writeFieldBegin('version_code', Thrift.Type.I32, 2);
    output.writeI32(this.version_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_checkBoxVersion_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ApiService_checkBoxVersion_result.prototype = {};
ApiService_checkBoxVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_checkBoxVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ApiService_checkBoxVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_getBoxResourcesList_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
  }
};
ApiService_getBoxResourcesList_args.prototype = {};
ApiService_getBoxResourcesList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_getBoxResourcesList_args.prototype.write = function(output) {
  output.writeStructBegin('ApiService_getBoxResourcesList_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.I64, 1);
    output.writeI64(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_getBoxResourcesList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ApiService_getBoxResourcesList_result.prototype = {};
ApiService_getBoxResourcesList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_getBoxResourcesList_result.prototype.write = function(output) {
  output.writeStructBegin('ApiService_getBoxResourcesList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_uploadBrush_args = function(args) {
  this.box_id = null;
  this.data = null;
  if (args) {
    if (args.box_id !== undefined && args.box_id !== null) {
      this.box_id = args.box_id;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
ApiService_uploadBrush_args.prototype = {};
ApiService_uploadBrush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.box_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_uploadBrush_args.prototype.write = function(output) {
  output.writeStructBegin('ApiService_uploadBrush_args');
  if (this.box_id !== null && this.box_id !== undefined) {
    output.writeFieldBegin('box_id', Thrift.Type.STRING, 1);
    output.writeString(this.box_id);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiService_uploadBrush_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof PublicStruct_ttypes.InvalidOperation) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ApiService_uploadBrush_result.prototype = {};
ApiService_uploadBrush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new PublicStruct_ttypes.InvalidOperation();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiService_uploadBrush_result.prototype.write = function(output) {
  output.writeStructBegin('ApiService_uploadBrush_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApiServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ApiServiceClient.prototype = {};
ApiServiceClient.prototype.seqid = function() { return this._seqid; }
ApiServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ApiServiceClient.prototype.boxLogin = function(username, password, box_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_boxLogin(username, password, box_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_boxLogin(username, password, box_id);
  }
};

ApiServiceClient.prototype.send_boxLogin = function(username, password, box_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('boxLogin', Thrift.MessageType.CALL, this.seqid());
  var args = new ApiService_boxLogin_args();
  args.username = username;
  args.password = password;
  args.box_id = box_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApiServiceClient.prototype.recv_boxLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ApiService_boxLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('boxLogin failed: unknown result');
};
ApiServiceClient.prototype.checkBoxVersion = function(box_id, version_code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkBoxVersion(box_id, version_code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkBoxVersion(box_id, version_code);
  }
};

ApiServiceClient.prototype.send_checkBoxVersion = function(box_id, version_code) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkBoxVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new ApiService_checkBoxVersion_args();
  args.box_id = box_id;
  args.version_code = version_code;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApiServiceClient.prototype.recv_checkBoxVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ApiService_checkBoxVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkBoxVersion failed: unknown result');
};
ApiServiceClient.prototype.getBoxResourcesList = function(user, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBoxResourcesList(user);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBoxResourcesList(user);
  }
};

ApiServiceClient.prototype.send_getBoxResourcesList = function(user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBoxResourcesList', Thrift.MessageType.CALL, this.seqid());
  var args = new ApiService_getBoxResourcesList_args();
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApiServiceClient.prototype.recv_getBoxResourcesList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ApiService_getBoxResourcesList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBoxResourcesList failed: unknown result');
};
ApiServiceClient.prototype.uploadBrush = function(box_id, data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_uploadBrush(box_id, data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_uploadBrush(box_id, data);
  }
};

ApiServiceClient.prototype.send_uploadBrush = function(box_id, data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uploadBrush', Thrift.MessageType.CALL, this.seqid());
  var args = new ApiService_uploadBrush_args();
  args.box_id = box_id;
  args.data = data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApiServiceClient.prototype.recv_uploadBrush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ApiService_uploadBrush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('uploadBrush failed: unknown result');
};
ApiServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ApiServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ApiServiceProcessor.prototype.process_boxLogin = function(seqid, input, output) {
  var args = new ApiService_boxLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.boxLogin.length === 3) {
    Q.fcall(this._handler.boxLogin, args.username, args.password, args.box_id)
      .then(function(result) {
        var result = new ApiService_boxLogin_result({success: result});
        output.writeMessageBegin("boxLogin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          var result = new ApiService_boxLogin_result(err);
          output.writeMessageBegin("boxLogin", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("boxLogin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.boxLogin(args.username, args.password, args.box_id, function (err, result) {
      if (err == null || err instanceof PublicStruct_ttypes.InvalidOperation) {
        var result = new ApiService_boxLogin_result((err != null ? err : {success: result}));
        output.writeMessageBegin("boxLogin", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("boxLogin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ApiServiceProcessor.prototype.process_checkBoxVersion = function(seqid, input, output) {
  var args = new ApiService_checkBoxVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkBoxVersion.length === 2) {
    Q.fcall(this._handler.checkBoxVersion, args.box_id, args.version_code)
      .then(function(result) {
        var result = new ApiService_checkBoxVersion_result({success: result});
        output.writeMessageBegin("checkBoxVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          var result = new ApiService_checkBoxVersion_result(err);
          output.writeMessageBegin("checkBoxVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkBoxVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkBoxVersion(args.box_id, args.version_code, function (err, result) {
      if (err == null || err instanceof PublicStruct_ttypes.InvalidOperation) {
        var result = new ApiService_checkBoxVersion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkBoxVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkBoxVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ApiServiceProcessor.prototype.process_getBoxResourcesList = function(seqid, input, output) {
  var args = new ApiService_getBoxResourcesList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBoxResourcesList.length === 1) {
    Q.fcall(this._handler.getBoxResourcesList, args.user)
      .then(function(result) {
        var result = new ApiService_getBoxResourcesList_result({success: result});
        output.writeMessageBegin("getBoxResourcesList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          var result = new ApiService_getBoxResourcesList_result(err);
          output.writeMessageBegin("getBoxResourcesList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBoxResourcesList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBoxResourcesList(args.user, function (err, result) {
      if (err == null || err instanceof PublicStruct_ttypes.InvalidOperation) {
        var result = new ApiService_getBoxResourcesList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBoxResourcesList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBoxResourcesList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ApiServiceProcessor.prototype.process_uploadBrush = function(seqid, input, output) {
  var args = new ApiService_uploadBrush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.uploadBrush.length === 2) {
    Q.fcall(this._handler.uploadBrush, args.box_id, args.data)
      .then(function(result) {
        var result = new ApiService_uploadBrush_result({success: result});
        output.writeMessageBegin("uploadBrush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof PublicStruct_ttypes.InvalidOperation) {
          var result = new ApiService_uploadBrush_result(err);
          output.writeMessageBegin("uploadBrush", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("uploadBrush", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.uploadBrush(args.box_id, args.data, function (err, result) {
      if (err == null || err instanceof PublicStruct_ttypes.InvalidOperation) {
        var result = new ApiService_uploadBrush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("uploadBrush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadBrush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

